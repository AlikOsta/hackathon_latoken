from aiogram import Router, types
from btn import create_keyboard
from aiogram.filters import Command
from answer import load_data_json, search_in_data_json, format_response
from gpt_bot import get_openai_response


router = Router()
data_json = load_data_json()


def get_relevant_context(data, query):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    Args:
        data (dict): –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
        query (str): –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Returns:
        str: –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
    """
    max_similarity = 0
    relevant_section = None
    
    for item in data:
        if "text" in item and "content" in item:
            relevance = sum(1 for word in query.split() 
                          if word in item["text"].lower())
            if relevance > max_similarity:
                max_similarity = relevance
                relevant_section = item

    if relevant_section:
        return f"**{relevant_section['text']}**\n" + "\n".join(relevant_section['content'])
    return "–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ LATOKEN –∏ –±–ª–æ–∫—á–µ–π–Ω-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö"


@router.message(Command("start"))
async def start_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    photo_url = "https://i.ibb.co/GM8fYn2/1-nkw-Ov-Y7-FSKx-Gt1-ww-W0-DEA.png"
    keyboard = create_keyboard() 
    await message.answer_photo(photo_url, caption="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç LATOKEN. –ò —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –æ—Ç–≤–µ—á—É –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!", reply_markup=keyboard)


@router.message()
async def handle_message(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –ò—â–µ—Ç –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–≥–æ —Å –ø–æ–º–æ—â—å—é GPT.
    """
    query = message.text.lower()
    deck_response = search_in_data_json(data_json, query)
    
    if deck_response:
        await message.answer(deck_response, parse_mode="Markdown")
        return
    
    loading_msg = await message.answer("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
    context = get_relevant_context(data_json, query)
    gpt_response = await get_openai_response(query, context)
    await loading_msg.edit_text(gpt_response)
